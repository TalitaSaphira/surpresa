// Substitua esses arrays pelos seus próprios valores de quaternions
float quaternions[4][N] = {
    {q1_1, q1_2, ..., q1_N},  // Quaternion 1: {w, x, y, z}
    {q2_1, q2_2, ..., q2_N},  // Quaternion 2: {w, x, y, z}
    {q3_1, q3_2, ..., q3_N},  // Quaternion 3: {w, x, y, z}
    {q4_1, q4_2, ..., q4_N}   // Quaternion 4: {w, x, y, z}
};

int N = 10;  // Número de observações (quaternions)

void setup() {
  Serial.begin(9600);
  
  // Calcula a média dos quaternions
  float mean_quaternion[4] = {0};
  for (int i = 0; i < N; ++i) {
    for (int j = 0; j < 4; ++j) {
      mean_quaternion[j] += quaternions[j][i];
    }
  }
  for (int j = 0; j < 4; ++j) {
    mean_quaternion[j] /= N;
  }

  // Calcula a covariância
  float covariance_matrix[4][4] = {0};
  for (int i = 0; i < N; ++i) {
    for (int j = 0; j < 4; ++j) {
      for (int k = 0; k < 4; ++k) {
        covariance_matrix[j][k] += (quaternions[j][i] - mean_quaternion[j]) * (quaternions[k][i] - mean_quaternion[k]);
      }
    }
  }
  for (int j = 0; j < 4; ++j) {
    for (int k = 0; k < 4; ++k) {
      covariance_matrix[j][k] /= N;
    }
  }

  // Imprime a matriz de covariância
  for (int j = 0; j < 4; ++j) {
    for (int k = 0; k < 4; ++k) {
      Serial.print(covariance_matrix[j][k], 6);
      Serial.print("\t");
    }
    Serial.println();
  }
}

void loop() {
  // O código principal está no setup(), não há necessidade de loop neste caso
}
