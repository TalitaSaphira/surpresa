#!/usr/bin/env python2
# -*- coding: utf-8 -*-

"""
Universidade Federal de Minas Gerais (UFMG) - 2023
Laboratorio CORO
Contact:
Joao Baiao, <baiaojfr.eng@gmail.com>
"""

import rospy
import tf
from std_msgs.msg import Float32MultiArray
from nav_msgs.msg import Odometry
import numpy as np
from geometry_msgs.msg import PoseWithCovarianceStamped
from numpy.linalg import norm

class Navigation_class:
    def __init__(self):
        # Navigation
        self.desired_velocity_b = [0.0, 0.0]
        self.desired_point_w = [0.0, 0.0]
        self.dist_ang = 0.0
        self.dist = 0.0
        self.origin_odom = [0.0, 0.0]
        self.C = []

        # Odometria
        self.pos = np.array([0.0, 0.0])
        self.quaternion = np.array([1.0, 0.0, 0.0, 0.0])

        # ROS
        self.freq = 30
        self.time_last = rospy.Time.now().to_sec()
        self.time_step = 0.1
        self.read_params()
        self.odom_sub = rospy.Subscriber(self.odometry_topic_name, PoseWithCovarianceStamped, self.pose_cb)
        self.inputs_pub = rospy.Publisher(self.input_topic_name, Float32MultiArray, queue_size=10)

    def read_params(self):
        # Obtain the parameters
        # Robot
        self.l = float(rospy.get_param("~l", 0.235145))
        self.w = float(rospy.get_param("~w", 0.12854)) 
        self.r = float(rospy.get_param("~r", 0.50))    
        # Control Parameters
        self.Kv = float(rospy.get_param("~speed_gain", 0.10))   
        self.Krot = float(rospy.get_param("~speed_rot_gain", 0.50))  
        self.tol_trans = float(rospy.get_param("~position_tolerance", 0.1)) 
        self.tol_angle = float(rospy.get_param("~orientation_tolerance", 1))  
        # Arena
        self.square_side = float(rospy.get_param("~square_side", 1.0)) 
        # Topics
        self.input_topic_name = (rospy.get_param("~input_topic_name", "robot/input")) 
        self.input_topic_msg_type = (rospy.get_param("~input_topic_msg_type", "Float32MultiArray")) 
        self.odometry_topic_name = (rospy.get_param("~odometry_topic_name", "gt")) 
        self.odometry_topic_msg_type = (rospy.get_param("~odometry_topic_msg_type", "Odometry")) 
        self.path_topic_name = (rospy.get_param("~path_topic_name", "path")) 
        # Vector Field Parameters
        self.beta = int(rospy.get_param("~beta", 1)) 
        self.closed_path_flag = False
        self.obstacles_pos = [] #[[1,1],[1,2]]
        self.obstacles_r = [] #[1.2,1.2]
        self.flag_follow_obstacle = False
        self.switch_dist_0 = 1.2
        self.epsilon = 0.5

    # Restante do c√≥digo...

